{"version":3,"file":"p__user__login__model.ts.eee4c9b1.async.js","sources":["src/pages/user/login/model.ts"],"sourcesContent":["import { router } from 'umi';\n\nimport { accountLogin } from '@/services/login';\nimport { query } from '@/services/user';\nimport { Effect, Reducer } from '@/models/connect';\n\nexport interface LoginModelState {\n  status?: 'ok' | 'error';\n  type?: string;\n  currentAuthority?: 'user' | 'guest' | 'admin';\n}\n\nexport interface LoginModelStore {\n  namespace: string;\n  state: LoginModelState;\n  effects: {\n    login: Effect;\n  };\n  reducers: {\n    save: Reducer<LoginModelState>;\n  };\n}\n\nconst LoginModel: LoginModelStore = {\n  namespace: 'login',\n  state: {\n    status: undefined,\n  },\n\n  effects: {\n    *login({ payload }, { select, put }) {\n      const { username, password } = payload;\n      const userList = query();\n      const user = userList.find(user => user.username === username);\n\n      // Login successfully\n      if (user && user.pwd === password) {\n        accountLogin(user.uid);\n        yield put({\n          type: 'save',\n          payload: { status: 'ok' },\n        });\n\n        const { location } = yield select(state => state.router);\n\n        const { query } = location;\n\n        if (query && query.redirect) {\n          window.location.href = query.redirect;\n        } else {\n          router.push('/');\n        }\n      } else {\n        yield put({\n          type: 'save',\n          payload: { status: 'error' },\n        });\n      }\n    },\n  },\n\n  reducers: {\n    save(state, { payload }) {\n      return {\n        ...state,\n        ...payload,\n      };\n    },\n  },\n};\n\nexport default LoginModel;\n"],"mappings":"AAuBA","sourceRoot":""}