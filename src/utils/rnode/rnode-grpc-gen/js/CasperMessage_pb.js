/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var scalapb_scalapb_pb = require('./scalapb/scalapb_pb.js');
goog.object.extend(proto, scalapb_scalapb_pb);
var RhoTypes_pb = require('./RhoTypes_pb.js');
goog.object.extend(proto, RhoTypes_pb);
goog.exportSymbol('proto.casper.ApprovedBlockCandidateProto', null, global);
goog.exportSymbol('proto.casper.ApprovedBlockProto', null, global);
goog.exportSymbol('proto.casper.ApprovedBlockRequestProto', null, global);
goog.exportSymbol('proto.casper.BlockApprovalProto', null, global);
goog.exportSymbol('proto.casper.BlockHashMessageProto', null, global);
goog.exportSymbol('proto.casper.BlockMessageProto', null, global);
goog.exportSymbol('proto.casper.BlockMetadataInternal', null, global);
goog.exportSymbol('proto.casper.BlockRequestProto', null, global);
goog.exportSymbol('proto.casper.BodyProto', null, global);
goog.exportSymbol('proto.casper.BondProto', null, global);
goog.exportSymbol('proto.casper.CommEventProto', null, global);
goog.exportSymbol('proto.casper.ConsumeEventProto', null, global);
goog.exportSymbol('proto.casper.DeployDataProto', null, global);
goog.exportSymbol('proto.casper.EventProto', null, global);
goog.exportSymbol('proto.casper.ForkChoiceTipRequestProto', null, global);
goog.exportSymbol('proto.casper.HasBlockProto', null, global);
goog.exportSymbol('proto.casper.HasBlockRequestProto', null, global);
goog.exportSymbol('proto.casper.HeaderProto', null, global);
goog.exportSymbol('proto.casper.JustificationProto', null, global);
goog.exportSymbol('proto.casper.NoApprovedBlockAvailableProto', null, global);
goog.exportSymbol('proto.casper.PeekProto', null, global);
goog.exportSymbol('proto.casper.ProcessedDeployProto', null, global);
goog.exportSymbol('proto.casper.ProduceEventProto', null, global);
goog.exportSymbol('proto.casper.RChainStateProto', null, global);
goog.exportSymbol('proto.casper.Signature', null, global);
goog.exportSymbol('proto.casper.UnapprovedBlockProto', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.HasBlockRequestProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.HasBlockRequestProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.HasBlockRequestProto.displayName = 'proto.casper.HasBlockRequestProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.HasBlockRequestProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.HasBlockRequestProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.HasBlockRequestProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.HasBlockRequestProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.HasBlockRequestProto}
 */
proto.casper.HasBlockRequestProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.HasBlockRequestProto;
  return proto.casper.HasBlockRequestProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.HasBlockRequestProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.HasBlockRequestProto}
 */
proto.casper.HasBlockRequestProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.HasBlockRequestProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.HasBlockRequestProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.HasBlockRequestProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.HasBlockRequestProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {string}
 */
proto.casper.HasBlockRequestProto.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.casper.HasBlockRequestProto.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.casper.HasBlockRequestProto.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.HasBlockRequestProto.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.HasBlockProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.HasBlockProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.HasBlockProto.displayName = 'proto.casper.HasBlockProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.HasBlockProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.HasBlockProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.HasBlockProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.HasBlockProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.HasBlockProto}
 */
proto.casper.HasBlockProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.HasBlockProto;
  return proto.casper.HasBlockProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.HasBlockProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.HasBlockProto}
 */
proto.casper.HasBlockProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.HasBlockProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.HasBlockProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.HasBlockProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.HasBlockProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {string}
 */
proto.casper.HasBlockProto.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.casper.HasBlockProto.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.casper.HasBlockProto.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.HasBlockProto.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlockRequestProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BlockRequestProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.BlockRequestProto.displayName = 'proto.casper.BlockRequestProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlockRequestProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlockRequestProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlockRequestProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockRequestProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlockRequestProto}
 */
proto.casper.BlockRequestProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlockRequestProto;
  return proto.casper.BlockRequestProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlockRequestProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlockRequestProto}
 */
proto.casper.BlockRequestProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlockRequestProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlockRequestProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlockRequestProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockRequestProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {string}
 */
proto.casper.BlockRequestProto.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.casper.BlockRequestProto.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.casper.BlockRequestProto.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.BlockRequestProto.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ForkChoiceTipRequestProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.ForkChoiceTipRequestProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.ForkChoiceTipRequestProto.displayName = 'proto.casper.ForkChoiceTipRequestProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ForkChoiceTipRequestProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ForkChoiceTipRequestProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ForkChoiceTipRequestProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ForkChoiceTipRequestProto.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ForkChoiceTipRequestProto}
 */
proto.casper.ForkChoiceTipRequestProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ForkChoiceTipRequestProto;
  return proto.casper.ForkChoiceTipRequestProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ForkChoiceTipRequestProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ForkChoiceTipRequestProto}
 */
proto.casper.ForkChoiceTipRequestProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ForkChoiceTipRequestProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ForkChoiceTipRequestProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ForkChoiceTipRequestProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ForkChoiceTipRequestProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ApprovedBlockCandidateProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.ApprovedBlockCandidateProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.ApprovedBlockCandidateProto.displayName = 'proto.casper.ApprovedBlockCandidateProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ApprovedBlockCandidateProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ApprovedBlockCandidateProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ApprovedBlockCandidateProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ApprovedBlockCandidateProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: (f = msg.getBlock()) && proto.casper.BlockMessageProto.toObject(includeInstance, f),
    requiredsigs: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ApprovedBlockCandidateProto}
 */
proto.casper.ApprovedBlockCandidateProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ApprovedBlockCandidateProto;
  return proto.casper.ApprovedBlockCandidateProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ApprovedBlockCandidateProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ApprovedBlockCandidateProto}
 */
proto.casper.ApprovedBlockCandidateProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.BlockMessageProto;
      reader.readMessage(value,proto.casper.BlockMessageProto.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRequiredsigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ApprovedBlockCandidateProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ApprovedBlockCandidateProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ApprovedBlockCandidateProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ApprovedBlockCandidateProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.BlockMessageProto.serializeBinaryToWriter
    );
  }
  f = message.getRequiredsigs();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional BlockMessageProto block = 1;
 * @return {?proto.casper.BlockMessageProto}
 */
proto.casper.ApprovedBlockCandidateProto.prototype.getBlock = function() {
  return /** @type{?proto.casper.BlockMessageProto} */ (
    jspb.Message.getWrapperField(this, proto.casper.BlockMessageProto, 1));
};


/** @param {?proto.casper.BlockMessageProto|undefined} value */
proto.casper.ApprovedBlockCandidateProto.prototype.setBlock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.casper.ApprovedBlockCandidateProto.prototype.clearBlock = function() {
  this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.ApprovedBlockCandidateProto.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 requiredSigs = 2;
 * @return {number}
 */
proto.casper.ApprovedBlockCandidateProto.prototype.getRequiredsigs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.casper.ApprovedBlockCandidateProto.prototype.setRequiredsigs = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.UnapprovedBlockProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.UnapprovedBlockProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.UnapprovedBlockProto.displayName = 'proto.casper.UnapprovedBlockProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.UnapprovedBlockProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.UnapprovedBlockProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.UnapprovedBlockProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.UnapprovedBlockProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidate: (f = msg.getCandidate()) && proto.casper.ApprovedBlockCandidateProto.toObject(includeInstance, f),
    timestamp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.UnapprovedBlockProto}
 */
proto.casper.UnapprovedBlockProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.UnapprovedBlockProto;
  return proto.casper.UnapprovedBlockProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.UnapprovedBlockProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.UnapprovedBlockProto}
 */
proto.casper.UnapprovedBlockProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.ApprovedBlockCandidateProto;
      reader.readMessage(value,proto.casper.ApprovedBlockCandidateProto.deserializeBinaryFromReader);
      msg.setCandidate(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.UnapprovedBlockProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.UnapprovedBlockProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.UnapprovedBlockProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.UnapprovedBlockProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandidate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.ApprovedBlockCandidateProto.serializeBinaryToWriter
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional ApprovedBlockCandidateProto candidate = 1;
 * @return {?proto.casper.ApprovedBlockCandidateProto}
 */
proto.casper.UnapprovedBlockProto.prototype.getCandidate = function() {
  return /** @type{?proto.casper.ApprovedBlockCandidateProto} */ (
    jspb.Message.getWrapperField(this, proto.casper.ApprovedBlockCandidateProto, 1));
};


/** @param {?proto.casper.ApprovedBlockCandidateProto|undefined} value */
proto.casper.UnapprovedBlockProto.prototype.setCandidate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.casper.UnapprovedBlockProto.prototype.clearCandidate = function() {
  this.setCandidate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.UnapprovedBlockProto.prototype.hasCandidate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 timestamp = 2;
 * @return {number}
 */
proto.casper.UnapprovedBlockProto.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.casper.UnapprovedBlockProto.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 duration = 3;
 * @return {number}
 */
proto.casper.UnapprovedBlockProto.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.casper.UnapprovedBlockProto.prototype.setDuration = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.Signature = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.Signature, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.Signature.displayName = 'proto.casper.Signature';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.Signature.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.Signature.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.Signature} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.Signature.toObject = function(includeInstance, msg) {
  var f, obj = {
    publickey: msg.getPublickey_asB64(),
    algorithm: jspb.Message.getFieldWithDefault(msg, 2, ""),
    sig: msg.getSig_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.Signature}
 */
proto.casper.Signature.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.Signature;
  return proto.casper.Signature.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.Signature} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.Signature}
 */
proto.casper.Signature.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPublickey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAlgorithm(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.Signature.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.Signature.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.Signature} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.Signature.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAlgorithm();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes publicKey = 1;
 * @return {string}
 */
proto.casper.Signature.prototype.getPublickey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes publicKey = 1;
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {string}
 */
proto.casper.Signature.prototype.getPublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPublickey()));
};


/**
 * optional bytes publicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPublickey()`
 * @return {!Uint8Array}
 */
proto.casper.Signature.prototype.getPublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.Signature.prototype.setPublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string algorithm = 2;
 * @return {string}
 */
proto.casper.Signature.prototype.getAlgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.casper.Signature.prototype.setAlgorithm = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional bytes sig = 3;
 * @return {string}
 */
proto.casper.Signature.prototype.getSig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sig = 3;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.casper.Signature.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.casper.Signature.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.Signature.prototype.setSig = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlockApprovalProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BlockApprovalProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.BlockApprovalProto.displayName = 'proto.casper.BlockApprovalProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlockApprovalProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlockApprovalProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlockApprovalProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockApprovalProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidate: (f = msg.getCandidate()) && proto.casper.ApprovedBlockCandidateProto.toObject(includeInstance, f),
    sig: (f = msg.getSig()) && proto.casper.Signature.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlockApprovalProto}
 */
proto.casper.BlockApprovalProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlockApprovalProto;
  return proto.casper.BlockApprovalProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlockApprovalProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlockApprovalProto}
 */
proto.casper.BlockApprovalProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.ApprovedBlockCandidateProto;
      reader.readMessage(value,proto.casper.ApprovedBlockCandidateProto.deserializeBinaryFromReader);
      msg.setCandidate(value);
      break;
    case 2:
      var value = new proto.casper.Signature;
      reader.readMessage(value,proto.casper.Signature.deserializeBinaryFromReader);
      msg.setSig(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlockApprovalProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlockApprovalProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlockApprovalProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockApprovalProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandidate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.ApprovedBlockCandidateProto.serializeBinaryToWriter
    );
  }
  f = message.getSig();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.casper.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional ApprovedBlockCandidateProto candidate = 1;
 * @return {?proto.casper.ApprovedBlockCandidateProto}
 */
proto.casper.BlockApprovalProto.prototype.getCandidate = function() {
  return /** @type{?proto.casper.ApprovedBlockCandidateProto} */ (
    jspb.Message.getWrapperField(this, proto.casper.ApprovedBlockCandidateProto, 1));
};


/** @param {?proto.casper.ApprovedBlockCandidateProto|undefined} value */
proto.casper.BlockApprovalProto.prototype.setCandidate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.casper.BlockApprovalProto.prototype.clearCandidate = function() {
  this.setCandidate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.BlockApprovalProto.prototype.hasCandidate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Signature sig = 2;
 * @return {?proto.casper.Signature}
 */
proto.casper.BlockApprovalProto.prototype.getSig = function() {
  return /** @type{?proto.casper.Signature} */ (
    jspb.Message.getWrapperField(this, proto.casper.Signature, 2));
};


/** @param {?proto.casper.Signature|undefined} value */
proto.casper.BlockApprovalProto.prototype.setSig = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.casper.BlockApprovalProto.prototype.clearSig = function() {
  this.setSig(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.BlockApprovalProto.prototype.hasSig = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ApprovedBlockProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.ApprovedBlockProto.repeatedFields_, null);
};
goog.inherits(proto.casper.ApprovedBlockProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.ApprovedBlockProto.displayName = 'proto.casper.ApprovedBlockProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.ApprovedBlockProto.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ApprovedBlockProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ApprovedBlockProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ApprovedBlockProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ApprovedBlockProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    candidate: (f = msg.getCandidate()) && proto.casper.ApprovedBlockCandidateProto.toObject(includeInstance, f),
    sigsList: jspb.Message.toObjectList(msg.getSigsList(),
    proto.casper.Signature.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ApprovedBlockProto}
 */
proto.casper.ApprovedBlockProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ApprovedBlockProto;
  return proto.casper.ApprovedBlockProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ApprovedBlockProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ApprovedBlockProto}
 */
proto.casper.ApprovedBlockProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.ApprovedBlockCandidateProto;
      reader.readMessage(value,proto.casper.ApprovedBlockCandidateProto.deserializeBinaryFromReader);
      msg.setCandidate(value);
      break;
    case 2:
      var value = new proto.casper.Signature;
      reader.readMessage(value,proto.casper.Signature.deserializeBinaryFromReader);
      msg.addSigs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ApprovedBlockProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ApprovedBlockProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ApprovedBlockProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ApprovedBlockProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandidate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.ApprovedBlockCandidateProto.serializeBinaryToWriter
    );
  }
  f = message.getSigsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.casper.Signature.serializeBinaryToWriter
    );
  }
};


/**
 * optional ApprovedBlockCandidateProto candidate = 1;
 * @return {?proto.casper.ApprovedBlockCandidateProto}
 */
proto.casper.ApprovedBlockProto.prototype.getCandidate = function() {
  return /** @type{?proto.casper.ApprovedBlockCandidateProto} */ (
    jspb.Message.getWrapperField(this, proto.casper.ApprovedBlockCandidateProto, 1));
};


/** @param {?proto.casper.ApprovedBlockCandidateProto|undefined} value */
proto.casper.ApprovedBlockProto.prototype.setCandidate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.casper.ApprovedBlockProto.prototype.clearCandidate = function() {
  this.setCandidate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.ApprovedBlockProto.prototype.hasCandidate = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated Signature sigs = 2;
 * @return {!Array<!proto.casper.Signature>}
 */
proto.casper.ApprovedBlockProto.prototype.getSigsList = function() {
  return /** @type{!Array<!proto.casper.Signature>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.casper.Signature, 2));
};


/** @param {!Array<!proto.casper.Signature>} value */
proto.casper.ApprovedBlockProto.prototype.setSigsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.casper.Signature=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.Signature}
 */
proto.casper.ApprovedBlockProto.prototype.addSigs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.casper.Signature, opt_index);
};


proto.casper.ApprovedBlockProto.prototype.clearSigsList = function() {
  this.setSigsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ApprovedBlockRequestProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.ApprovedBlockRequestProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.ApprovedBlockRequestProto.displayName = 'proto.casper.ApprovedBlockRequestProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ApprovedBlockRequestProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ApprovedBlockRequestProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ApprovedBlockRequestProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ApprovedBlockRequestProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ApprovedBlockRequestProto}
 */
proto.casper.ApprovedBlockRequestProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ApprovedBlockRequestProto;
  return proto.casper.ApprovedBlockRequestProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ApprovedBlockRequestProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ApprovedBlockRequestProto}
 */
proto.casper.ApprovedBlockRequestProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ApprovedBlockRequestProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ApprovedBlockRequestProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ApprovedBlockRequestProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ApprovedBlockRequestProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.casper.ApprovedBlockRequestProto.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.casper.ApprovedBlockRequestProto.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.NoApprovedBlockAvailableProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.NoApprovedBlockAvailableProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.NoApprovedBlockAvailableProto.displayName = 'proto.casper.NoApprovedBlockAvailableProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.NoApprovedBlockAvailableProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.NoApprovedBlockAvailableProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.NoApprovedBlockAvailableProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.NoApprovedBlockAvailableProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    identifier: jspb.Message.getFieldWithDefault(msg, 1, ""),
    nodeidentifer: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.NoApprovedBlockAvailableProto}
 */
proto.casper.NoApprovedBlockAvailableProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.NoApprovedBlockAvailableProto;
  return proto.casper.NoApprovedBlockAvailableProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.NoApprovedBlockAvailableProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.NoApprovedBlockAvailableProto}
 */
proto.casper.NoApprovedBlockAvailableProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIdentifier(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeidentifer(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.NoApprovedBlockAvailableProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.NoApprovedBlockAvailableProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.NoApprovedBlockAvailableProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.NoApprovedBlockAvailableProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIdentifier();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNodeidentifer();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string identifier = 1;
 * @return {string}
 */
proto.casper.NoApprovedBlockAvailableProto.prototype.getIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.casper.NoApprovedBlockAvailableProto.prototype.setIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string nodeIdentifer = 2;
 * @return {string}
 */
proto.casper.NoApprovedBlockAvailableProto.prototype.getNodeidentifer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.casper.NoApprovedBlockAvailableProto.prototype.setNodeidentifer = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlockMessageProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.BlockMessageProto.repeatedFields_, null);
};
goog.inherits(proto.casper.BlockMessageProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.BlockMessageProto.displayName = 'proto.casper.BlockMessageProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.BlockMessageProto.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlockMessageProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlockMessageProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlockMessageProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockMessageProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockhash: msg.getBlockhash_asB64(),
    header: (f = msg.getHeader()) && proto.casper.HeaderProto.toObject(includeInstance, f),
    body: (f = msg.getBody()) && proto.casper.BodyProto.toObject(includeInstance, f),
    justificationsList: jspb.Message.toObjectList(msg.getJustificationsList(),
    proto.casper.JustificationProto.toObject, includeInstance),
    sender: msg.getSender_asB64(),
    seqnum: jspb.Message.getFieldWithDefault(msg, 6, 0),
    sig: msg.getSig_asB64(),
    sigalgorithm: jspb.Message.getFieldWithDefault(msg, 8, ""),
    shardid: jspb.Message.getFieldWithDefault(msg, 9, ""),
    extrabytes: msg.getExtrabytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlockMessageProto}
 */
proto.casper.BlockMessageProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlockMessageProto;
  return proto.casper.BlockMessageProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlockMessageProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlockMessageProto}
 */
proto.casper.BlockMessageProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockhash(value);
      break;
    case 2:
      var value = new proto.casper.HeaderProto;
      reader.readMessage(value,proto.casper.HeaderProto.deserializeBinaryFromReader);
      msg.setHeader(value);
      break;
    case 3:
      var value = new proto.casper.BodyProto;
      reader.readMessage(value,proto.casper.BodyProto.deserializeBinaryFromReader);
      msg.setBody(value);
      break;
    case 4:
      var value = new proto.casper.JustificationProto;
      reader.readMessage(value,proto.casper.JustificationProto.deserializeBinaryFromReader);
      msg.addJustifications(value);
      break;
    case 5:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSender(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeqnum(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigalgorithm(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setShardid(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtrabytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlockMessageProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlockMessageProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlockMessageProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockMessageProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHeader();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.casper.HeaderProto.serializeBinaryToWriter
    );
  }
  f = message.getBody();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.casper.BodyProto.serializeBinaryToWriter
    );
  }
  f = message.getJustificationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.casper.JustificationProto.serializeBinaryToWriter
    );
  }
  f = message.getSender_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      5,
      f
    );
  }
  f = message.getSeqnum();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getSigalgorithm();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getShardid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getExtrabytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
};


/**
 * optional bytes blockHash = 1;
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.getBlockhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes blockHash = 1;
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.getBlockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockhash()));
};


/**
 * optional bytes blockHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {!Uint8Array}
 */
proto.casper.BlockMessageProto.prototype.getBlockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.BlockMessageProto.prototype.setBlockhash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional HeaderProto header = 2;
 * @return {?proto.casper.HeaderProto}
 */
proto.casper.BlockMessageProto.prototype.getHeader = function() {
  return /** @type{?proto.casper.HeaderProto} */ (
    jspb.Message.getWrapperField(this, proto.casper.HeaderProto, 2));
};


/** @param {?proto.casper.HeaderProto|undefined} value */
proto.casper.BlockMessageProto.prototype.setHeader = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.casper.BlockMessageProto.prototype.clearHeader = function() {
  this.setHeader(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.BlockMessageProto.prototype.hasHeader = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BodyProto body = 3;
 * @return {?proto.casper.BodyProto}
 */
proto.casper.BlockMessageProto.prototype.getBody = function() {
  return /** @type{?proto.casper.BodyProto} */ (
    jspb.Message.getWrapperField(this, proto.casper.BodyProto, 3));
};


/** @param {?proto.casper.BodyProto|undefined} value */
proto.casper.BlockMessageProto.prototype.setBody = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.casper.BlockMessageProto.prototype.clearBody = function() {
  this.setBody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.BlockMessageProto.prototype.hasBody = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * repeated JustificationProto justifications = 4;
 * @return {!Array<!proto.casper.JustificationProto>}
 */
proto.casper.BlockMessageProto.prototype.getJustificationsList = function() {
  return /** @type{!Array<!proto.casper.JustificationProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.casper.JustificationProto, 4));
};


/** @param {!Array<!proto.casper.JustificationProto>} value */
proto.casper.BlockMessageProto.prototype.setJustificationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.casper.JustificationProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.JustificationProto}
 */
proto.casper.BlockMessageProto.prototype.addJustifications = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.casper.JustificationProto, opt_index);
};


proto.casper.BlockMessageProto.prototype.clearJustificationsList = function() {
  this.setJustificationsList([]);
};


/**
 * optional bytes sender = 5;
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * optional bytes sender = 5;
 * This is a type-conversion wrapper around `getSender()`
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.getSender_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSender()));
};


/**
 * optional bytes sender = 5;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSender()`
 * @return {!Uint8Array}
 */
proto.casper.BlockMessageProto.prototype.getSender_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSender()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.BlockMessageProto.prototype.setSender = function(value) {
  jspb.Message.setProto3BytesField(this, 5, value);
};


/**
 * optional int32 seqNum = 6;
 * @return {number}
 */
proto.casper.BlockMessageProto.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.casper.BlockMessageProto.prototype.setSeqnum = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional bytes sig = 7;
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.getSig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes sig = 7;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.casper.BlockMessageProto.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.BlockMessageProto.prototype.setSig = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional string sigAlgorithm = 8;
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.getSigalgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.casper.BlockMessageProto.prototype.setSigalgorithm = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string shardId = 9;
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.getShardid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.casper.BlockMessageProto.prototype.setShardid = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional bytes extraBytes = 10;
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.getExtrabytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes extraBytes = 10;
 * This is a type-conversion wrapper around `getExtrabytes()`
 * @return {string}
 */
proto.casper.BlockMessageProto.prototype.getExtrabytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtrabytes()));
};


/**
 * optional bytes extraBytes = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtrabytes()`
 * @return {!Uint8Array}
 */
proto.casper.BlockMessageProto.prototype.getExtrabytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtrabytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.BlockMessageProto.prototype.setExtrabytes = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlockHashMessageProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BlockHashMessageProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.BlockHashMessageProto.displayName = 'proto.casper.BlockHashMessageProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlockHashMessageProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlockHashMessageProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlockHashMessageProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockHashMessageProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    hash: msg.getHash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlockHashMessageProto}
 */
proto.casper.BlockHashMessageProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlockHashMessageProto;
  return proto.casper.BlockHashMessageProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlockHashMessageProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlockHashMessageProto}
 */
proto.casper.BlockHashMessageProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlockHashMessageProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlockHashMessageProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlockHashMessageProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockHashMessageProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes hash = 1;
 * @return {string}
 */
proto.casper.BlockHashMessageProto.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes hash = 1;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.casper.BlockHashMessageProto.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.casper.BlockHashMessageProto.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.BlockHashMessageProto.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BlockMetadataInternal = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.BlockMetadataInternal.repeatedFields_, null);
};
goog.inherits(proto.casper.BlockMetadataInternal, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.BlockMetadataInternal.displayName = 'proto.casper.BlockMetadataInternal';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.BlockMetadataInternal.repeatedFields_ = [2,4,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BlockMetadataInternal.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BlockMetadataInternal.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BlockMetadataInternal} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockMetadataInternal.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockhash: msg.getBlockhash_asB64(),
    parentsList: msg.getParentsList_asB64(),
    sender: msg.getSender_asB64(),
    justificationsList: jspb.Message.toObjectList(msg.getJustificationsList(),
    proto.casper.JustificationProto.toObject, includeInstance),
    bondsList: jspb.Message.toObjectList(msg.getBondsList(),
    proto.casper.BondProto.toObject, includeInstance),
    blocknum: jspb.Message.getFieldWithDefault(msg, 6, 0),
    seqnum: jspb.Message.getFieldWithDefault(msg, 7, 0),
    invalid: jspb.Message.getFieldWithDefault(msg, 8, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BlockMetadataInternal}
 */
proto.casper.BlockMetadataInternal.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BlockMetadataInternal;
  return proto.casper.BlockMetadataInternal.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BlockMetadataInternal} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BlockMetadataInternal}
 */
proto.casper.BlockMetadataInternal.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockhash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addParents(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSender(value);
      break;
    case 4:
      var value = new proto.casper.JustificationProto;
      reader.readMessage(value,proto.casper.JustificationProto.deserializeBinaryFromReader);
      msg.addJustifications(value);
      break;
    case 5:
      var value = new proto.casper.BondProto;
      reader.readMessage(value,proto.casper.BondProto.deserializeBinaryFromReader);
      msg.addBonds(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlocknum(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeqnum(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setInvalid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BlockMetadataInternal.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BlockMetadataInternal.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BlockMetadataInternal} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BlockMetadataInternal.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getParentsList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      2,
      f
    );
  }
  f = message.getSender_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getJustificationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.casper.JustificationProto.serializeBinaryToWriter
    );
  }
  f = message.getBondsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.casper.BondProto.serializeBinaryToWriter
    );
  }
  f = message.getBlocknum();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getSeqnum();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getInvalid();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
};


/**
 * optional bytes blockHash = 1;
 * @return {string}
 */
proto.casper.BlockMetadataInternal.prototype.getBlockhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes blockHash = 1;
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {string}
 */
proto.casper.BlockMetadataInternal.prototype.getBlockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockhash()));
};


/**
 * optional bytes blockHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {!Uint8Array}
 */
proto.casper.BlockMetadataInternal.prototype.getBlockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.BlockMetadataInternal.prototype.setBlockhash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * repeated bytes parents = 2;
 * @return {!Array<string>}
 */
proto.casper.BlockMetadataInternal.prototype.getParentsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/**
 * repeated bytes parents = 2;
 * This is a type-conversion wrapper around `getParentsList()`
 * @return {!Array<string>}
 */
proto.casper.BlockMetadataInternal.prototype.getParentsList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getParentsList()));
};


/**
 * repeated bytes parents = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentsList()`
 * @return {!Array<!Uint8Array>}
 */
proto.casper.BlockMetadataInternal.prototype.getParentsList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getParentsList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.casper.BlockMetadataInternal.prototype.setParentsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.casper.BlockMetadataInternal.prototype.addParents = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.casper.BlockMetadataInternal.prototype.clearParentsList = function() {
  this.setParentsList([]);
};


/**
 * optional bytes sender = 3;
 * @return {string}
 */
proto.casper.BlockMetadataInternal.prototype.getSender = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes sender = 3;
 * This is a type-conversion wrapper around `getSender()`
 * @return {string}
 */
proto.casper.BlockMetadataInternal.prototype.getSender_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSender()));
};


/**
 * optional bytes sender = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSender()`
 * @return {!Uint8Array}
 */
proto.casper.BlockMetadataInternal.prototype.getSender_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSender()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.BlockMetadataInternal.prototype.setSender = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * repeated JustificationProto justifications = 4;
 * @return {!Array<!proto.casper.JustificationProto>}
 */
proto.casper.BlockMetadataInternal.prototype.getJustificationsList = function() {
  return /** @type{!Array<!proto.casper.JustificationProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.casper.JustificationProto, 4));
};


/** @param {!Array<!proto.casper.JustificationProto>} value */
proto.casper.BlockMetadataInternal.prototype.setJustificationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.casper.JustificationProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.JustificationProto}
 */
proto.casper.BlockMetadataInternal.prototype.addJustifications = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.casper.JustificationProto, opt_index);
};


proto.casper.BlockMetadataInternal.prototype.clearJustificationsList = function() {
  this.setJustificationsList([]);
};


/**
 * repeated BondProto bonds = 5;
 * @return {!Array<!proto.casper.BondProto>}
 */
proto.casper.BlockMetadataInternal.prototype.getBondsList = function() {
  return /** @type{!Array<!proto.casper.BondProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.casper.BondProto, 5));
};


/** @param {!Array<!proto.casper.BondProto>} value */
proto.casper.BlockMetadataInternal.prototype.setBondsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.casper.BondProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.BondProto}
 */
proto.casper.BlockMetadataInternal.prototype.addBonds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.casper.BondProto, opt_index);
};


proto.casper.BlockMetadataInternal.prototype.clearBondsList = function() {
  this.setBondsList([]);
};


/**
 * optional int64 blockNum = 6;
 * @return {number}
 */
proto.casper.BlockMetadataInternal.prototype.getBlocknum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.casper.BlockMetadataInternal.prototype.setBlocknum = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 seqNum = 7;
 * @return {number}
 */
proto.casper.BlockMetadataInternal.prototype.getSeqnum = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.casper.BlockMetadataInternal.prototype.setSeqnum = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool invalid = 8;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.casper.BlockMetadataInternal.prototype.getInvalid = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.casper.BlockMetadataInternal.prototype.setInvalid = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.HeaderProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.HeaderProto.repeatedFields_, null);
};
goog.inherits(proto.casper.HeaderProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.HeaderProto.displayName = 'proto.casper.HeaderProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.HeaderProto.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.HeaderProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.HeaderProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.HeaderProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.HeaderProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    parentshashlistList: msg.getParentshashlistList_asB64(),
    deployshash: msg.getDeployshash_asB64(),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, 0),
    version: jspb.Message.getFieldWithDefault(msg, 6, 0),
    deploycount: jspb.Message.getFieldWithDefault(msg, 7, 0),
    extrabytes: msg.getExtrabytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.HeaderProto}
 */
proto.casper.HeaderProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.HeaderProto;
  return proto.casper.HeaderProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.HeaderProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.HeaderProto}
 */
proto.casper.HeaderProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addParentshashlist(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeployshash(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVersion(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDeploycount(value);
      break;
    case 8:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtrabytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.HeaderProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.HeaderProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.HeaderProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.HeaderProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParentshashlistList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getDeployshash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getDeploycount();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getExtrabytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      8,
      f
    );
  }
};


/**
 * repeated bytes parentsHashList = 1;
 * @return {!Array<string>}
 */
proto.casper.HeaderProto.prototype.getParentshashlistList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes parentsHashList = 1;
 * This is a type-conversion wrapper around `getParentshashlistList()`
 * @return {!Array<string>}
 */
proto.casper.HeaderProto.prototype.getParentshashlistList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getParentshashlistList()));
};


/**
 * repeated bytes parentsHashList = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getParentshashlistList()`
 * @return {!Array<!Uint8Array>}
 */
proto.casper.HeaderProto.prototype.getParentshashlistList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getParentshashlistList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.casper.HeaderProto.prototype.setParentshashlistList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.casper.HeaderProto.prototype.addParentshashlist = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.casper.HeaderProto.prototype.clearParentshashlistList = function() {
  this.setParentshashlistList([]);
};


/**
 * optional bytes deploysHash = 3;
 * @return {string}
 */
proto.casper.HeaderProto.prototype.getDeployshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes deploysHash = 3;
 * This is a type-conversion wrapper around `getDeployshash()`
 * @return {string}
 */
proto.casper.HeaderProto.prototype.getDeployshash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeployshash()));
};


/**
 * optional bytes deploysHash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeployshash()`
 * @return {!Uint8Array}
 */
proto.casper.HeaderProto.prototype.getDeployshash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeployshash()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.HeaderProto.prototype.setDeployshash = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional int64 timestamp = 5;
 * @return {number}
 */
proto.casper.HeaderProto.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.casper.HeaderProto.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 version = 6;
 * @return {number}
 */
proto.casper.HeaderProto.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.casper.HeaderProto.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 deployCount = 7;
 * @return {number}
 */
proto.casper.HeaderProto.prototype.getDeploycount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.casper.HeaderProto.prototype.setDeploycount = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bytes extraBytes = 8;
 * @return {string}
 */
proto.casper.HeaderProto.prototype.getExtrabytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * optional bytes extraBytes = 8;
 * This is a type-conversion wrapper around `getExtrabytes()`
 * @return {string}
 */
proto.casper.HeaderProto.prototype.getExtrabytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtrabytes()));
};


/**
 * optional bytes extraBytes = 8;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtrabytes()`
 * @return {!Uint8Array}
 */
proto.casper.HeaderProto.prototype.getExtrabytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtrabytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.HeaderProto.prototype.setExtrabytes = function(value) {
  jspb.Message.setProto3BytesField(this, 8, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.DeployDataProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.DeployDataProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.DeployDataProto.displayName = 'proto.casper.DeployDataProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.DeployDataProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.DeployDataProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.DeployDataProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.DeployDataProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    deployer: msg.getDeployer_asB64(),
    term: jspb.Message.getFieldWithDefault(msg, 2, ""),
    timestamp: jspb.Message.getFieldWithDefault(msg, 3, 0),
    sig: msg.getSig_asB64(),
    sigalgorithm: jspb.Message.getFieldWithDefault(msg, 5, ""),
    phloprice: jspb.Message.getFieldWithDefault(msg, 7, 0),
    phlolimit: jspb.Message.getFieldWithDefault(msg, 8, 0),
    validafterblocknumber: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.DeployDataProto}
 */
proto.casper.DeployDataProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.DeployDataProto;
  return proto.casper.DeployDataProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.DeployDataProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.DeployDataProto}
 */
proto.casper.DeployDataProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setDeployer(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTerm(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTimestamp(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSig(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSigalgorithm(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPhloprice(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPhlolimit(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setValidafterblocknumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.DeployDataProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.DeployDataProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.DeployDataProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.DeployDataProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeployer_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getTerm();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getSig_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      4,
      f
    );
  }
  f = message.getSigalgorithm();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getPhloprice();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getPhlolimit();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getValidafterblocknumber();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
};


/**
 * optional bytes deployer = 1;
 * @return {string}
 */
proto.casper.DeployDataProto.prototype.getDeployer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes deployer = 1;
 * This is a type-conversion wrapper around `getDeployer()`
 * @return {string}
 */
proto.casper.DeployDataProto.prototype.getDeployer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getDeployer()));
};


/**
 * optional bytes deployer = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getDeployer()`
 * @return {!Uint8Array}
 */
proto.casper.DeployDataProto.prototype.getDeployer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getDeployer()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.DeployDataProto.prototype.setDeployer = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string term = 2;
 * @return {string}
 */
proto.casper.DeployDataProto.prototype.getTerm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.casper.DeployDataProto.prototype.setTerm = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 timestamp = 3;
 * @return {number}
 */
proto.casper.DeployDataProto.prototype.getTimestamp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.casper.DeployDataProto.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional bytes sig = 4;
 * @return {string}
 */
proto.casper.DeployDataProto.prototype.getSig = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes sig = 4;
 * This is a type-conversion wrapper around `getSig()`
 * @return {string}
 */
proto.casper.DeployDataProto.prototype.getSig_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSig()));
};


/**
 * optional bytes sig = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSig()`
 * @return {!Uint8Array}
 */
proto.casper.DeployDataProto.prototype.getSig_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSig()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.DeployDataProto.prototype.setSig = function(value) {
  jspb.Message.setProto3BytesField(this, 4, value);
};


/**
 * optional string sigAlgorithm = 5;
 * @return {string}
 */
proto.casper.DeployDataProto.prototype.getSigalgorithm = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.casper.DeployDataProto.prototype.setSigalgorithm = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 phloPrice = 7;
 * @return {number}
 */
proto.casper.DeployDataProto.prototype.getPhloprice = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.casper.DeployDataProto.prototype.setPhloprice = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 phloLimit = 8;
 * @return {number}
 */
proto.casper.DeployDataProto.prototype.getPhlolimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.casper.DeployDataProto.prototype.setPhlolimit = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int64 validAfterBlockNumber = 10;
 * @return {number}
 */
proto.casper.DeployDataProto.prototype.getValidafterblocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.casper.DeployDataProto.prototype.setValidafterblocknumber = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ProcessedDeployProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.ProcessedDeployProto.repeatedFields_, null);
};
goog.inherits(proto.casper.ProcessedDeployProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.ProcessedDeployProto.displayName = 'proto.casper.ProcessedDeployProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.ProcessedDeployProto.repeatedFields_ = [3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ProcessedDeployProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ProcessedDeployProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ProcessedDeployProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ProcessedDeployProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    deploy: (f = msg.getDeploy()) && proto.casper.DeployDataProto.toObject(includeInstance, f),
    cost: (f = msg.getCost()) && RhoTypes_pb.PCost.toObject(includeInstance, f),
    deploylogList: jspb.Message.toObjectList(msg.getDeploylogList(),
    proto.casper.EventProto.toObject, includeInstance),
    paymentlogList: jspb.Message.toObjectList(msg.getPaymentlogList(),
    proto.casper.EventProto.toObject, includeInstance),
    errored: jspb.Message.getFieldWithDefault(msg, 5, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ProcessedDeployProto}
 */
proto.casper.ProcessedDeployProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ProcessedDeployProto;
  return proto.casper.ProcessedDeployProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ProcessedDeployProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ProcessedDeployProto}
 */
proto.casper.ProcessedDeployProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.DeployDataProto;
      reader.readMessage(value,proto.casper.DeployDataProto.deserializeBinaryFromReader);
      msg.setDeploy(value);
      break;
    case 2:
      var value = new RhoTypes_pb.PCost;
      reader.readMessage(value,RhoTypes_pb.PCost.deserializeBinaryFromReader);
      msg.setCost(value);
      break;
    case 3:
      var value = new proto.casper.EventProto;
      reader.readMessage(value,proto.casper.EventProto.deserializeBinaryFromReader);
      msg.addDeploylog(value);
      break;
    case 4:
      var value = new proto.casper.EventProto;
      reader.readMessage(value,proto.casper.EventProto.deserializeBinaryFromReader);
      msg.addPaymentlog(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setErrored(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ProcessedDeployProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ProcessedDeployProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ProcessedDeployProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ProcessedDeployProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeploy();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.DeployDataProto.serializeBinaryToWriter
    );
  }
  f = message.getCost();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      RhoTypes_pb.PCost.serializeBinaryToWriter
    );
  }
  f = message.getDeploylogList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.casper.EventProto.serializeBinaryToWriter
    );
  }
  f = message.getPaymentlogList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.casper.EventProto.serializeBinaryToWriter
    );
  }
  f = message.getErrored();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
};


/**
 * optional DeployDataProto deploy = 1;
 * @return {?proto.casper.DeployDataProto}
 */
proto.casper.ProcessedDeployProto.prototype.getDeploy = function() {
  return /** @type{?proto.casper.DeployDataProto} */ (
    jspb.Message.getWrapperField(this, proto.casper.DeployDataProto, 1));
};


/** @param {?proto.casper.DeployDataProto|undefined} value */
proto.casper.ProcessedDeployProto.prototype.setDeploy = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.casper.ProcessedDeployProto.prototype.clearDeploy = function() {
  this.setDeploy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.ProcessedDeployProto.prototype.hasDeploy = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional PCost cost = 2;
 * @return {?proto.PCost}
 */
proto.casper.ProcessedDeployProto.prototype.getCost = function() {
  return /** @type{?proto.PCost} */ (
    jspb.Message.getWrapperField(this, RhoTypes_pb.PCost, 2));
};


/** @param {?proto.PCost|undefined} value */
proto.casper.ProcessedDeployProto.prototype.setCost = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.casper.ProcessedDeployProto.prototype.clearCost = function() {
  this.setCost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.ProcessedDeployProto.prototype.hasCost = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated EventProto deployLog = 3;
 * @return {!Array<!proto.casper.EventProto>}
 */
proto.casper.ProcessedDeployProto.prototype.getDeploylogList = function() {
  return /** @type{!Array<!proto.casper.EventProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.casper.EventProto, 3));
};


/** @param {!Array<!proto.casper.EventProto>} value */
proto.casper.ProcessedDeployProto.prototype.setDeploylogList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.casper.EventProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.EventProto}
 */
proto.casper.ProcessedDeployProto.prototype.addDeploylog = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.casper.EventProto, opt_index);
};


proto.casper.ProcessedDeployProto.prototype.clearDeploylogList = function() {
  this.setDeploylogList([]);
};


/**
 * repeated EventProto paymentLog = 4;
 * @return {!Array<!proto.casper.EventProto>}
 */
proto.casper.ProcessedDeployProto.prototype.getPaymentlogList = function() {
  return /** @type{!Array<!proto.casper.EventProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.casper.EventProto, 4));
};


/** @param {!Array<!proto.casper.EventProto>} value */
proto.casper.ProcessedDeployProto.prototype.setPaymentlogList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.casper.EventProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.EventProto}
 */
proto.casper.ProcessedDeployProto.prototype.addPaymentlog = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.casper.EventProto, opt_index);
};


proto.casper.ProcessedDeployProto.prototype.clearPaymentlogList = function() {
  this.setPaymentlogList([]);
};


/**
 * optional bool errored = 5;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.casper.ProcessedDeployProto.prototype.getErrored = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 5, false));
};


/** @param {boolean} value */
proto.casper.ProcessedDeployProto.prototype.setErrored = function(value) {
  jspb.Message.setProto3BooleanField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BodyProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.BodyProto.repeatedFields_, null);
};
goog.inherits(proto.casper.BodyProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.BodyProto.displayName = 'proto.casper.BodyProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.BodyProto.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BodyProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BodyProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BodyProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BodyProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    state: (f = msg.getState()) && proto.casper.RChainStateProto.toObject(includeInstance, f),
    deploysList: jspb.Message.toObjectList(msg.getDeploysList(),
    proto.casper.ProcessedDeployProto.toObject, includeInstance),
    extrabytes: msg.getExtrabytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BodyProto}
 */
proto.casper.BodyProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BodyProto;
  return proto.casper.BodyProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BodyProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BodyProto}
 */
proto.casper.BodyProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.RChainStateProto;
      reader.readMessage(value,proto.casper.RChainStateProto.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    case 2:
      var value = new proto.casper.ProcessedDeployProto;
      reader.readMessage(value,proto.casper.ProcessedDeployProto.deserializeBinaryFromReader);
      msg.addDeploys(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setExtrabytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BodyProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BodyProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BodyProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BodyProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.RChainStateProto.serializeBinaryToWriter
    );
  }
  f = message.getDeploysList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.casper.ProcessedDeployProto.serializeBinaryToWriter
    );
  }
  f = message.getExtrabytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional RChainStateProto state = 1;
 * @return {?proto.casper.RChainStateProto}
 */
proto.casper.BodyProto.prototype.getState = function() {
  return /** @type{?proto.casper.RChainStateProto} */ (
    jspb.Message.getWrapperField(this, proto.casper.RChainStateProto, 1));
};


/** @param {?proto.casper.RChainStateProto|undefined} value */
proto.casper.BodyProto.prototype.setState = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.casper.BodyProto.prototype.clearState = function() {
  this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.BodyProto.prototype.hasState = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ProcessedDeployProto deploys = 2;
 * @return {!Array<!proto.casper.ProcessedDeployProto>}
 */
proto.casper.BodyProto.prototype.getDeploysList = function() {
  return /** @type{!Array<!proto.casper.ProcessedDeployProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.casper.ProcessedDeployProto, 2));
};


/** @param {!Array<!proto.casper.ProcessedDeployProto>} value */
proto.casper.BodyProto.prototype.setDeploysList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.casper.ProcessedDeployProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.ProcessedDeployProto}
 */
proto.casper.BodyProto.prototype.addDeploys = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.casper.ProcessedDeployProto, opt_index);
};


proto.casper.BodyProto.prototype.clearDeploysList = function() {
  this.setDeploysList([]);
};


/**
 * optional bytes extraBytes = 3;
 * @return {string}
 */
proto.casper.BodyProto.prototype.getExtrabytes = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes extraBytes = 3;
 * This is a type-conversion wrapper around `getExtrabytes()`
 * @return {string}
 */
proto.casper.BodyProto.prototype.getExtrabytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getExtrabytes()));
};


/**
 * optional bytes extraBytes = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getExtrabytes()`
 * @return {!Uint8Array}
 */
proto.casper.BodyProto.prototype.getExtrabytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getExtrabytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.BodyProto.prototype.setExtrabytes = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.JustificationProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.JustificationProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.JustificationProto.displayName = 'proto.casper.JustificationProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.JustificationProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.JustificationProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.JustificationProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.JustificationProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: msg.getValidator_asB64(),
    latestblockhash: msg.getLatestblockhash_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.JustificationProto}
 */
proto.casper.JustificationProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.JustificationProto;
  return proto.casper.JustificationProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.JustificationProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.JustificationProto}
 */
proto.casper.JustificationProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidator(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setLatestblockhash(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.JustificationProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.JustificationProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.JustificationProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.JustificationProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidator_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getLatestblockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
};


/**
 * optional bytes validator = 1;
 * @return {string}
 */
proto.casper.JustificationProto.prototype.getValidator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes validator = 1;
 * This is a type-conversion wrapper around `getValidator()`
 * @return {string}
 */
proto.casper.JustificationProto.prototype.getValidator_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidator()));
};


/**
 * optional bytes validator = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidator()`
 * @return {!Uint8Array}
 */
proto.casper.JustificationProto.prototype.getValidator_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidator()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.JustificationProto.prototype.setValidator = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes latestBlockHash = 2;
 * @return {string}
 */
proto.casper.JustificationProto.prototype.getLatestblockhash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes latestBlockHash = 2;
 * This is a type-conversion wrapper around `getLatestblockhash()`
 * @return {string}
 */
proto.casper.JustificationProto.prototype.getLatestblockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getLatestblockhash()));
};


/**
 * optional bytes latestBlockHash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getLatestblockhash()`
 * @return {!Uint8Array}
 */
proto.casper.JustificationProto.prototype.getLatestblockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getLatestblockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.JustificationProto.prototype.setLatestblockhash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.RChainStateProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.RChainStateProto.repeatedFields_, null);
};
goog.inherits(proto.casper.RChainStateProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.RChainStateProto.displayName = 'proto.casper.RChainStateProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.RChainStateProto.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.RChainStateProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.RChainStateProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.RChainStateProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.RChainStateProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    prestatehash: msg.getPrestatehash_asB64(),
    poststatehash: msg.getPoststatehash_asB64(),
    bondsList: jspb.Message.toObjectList(msg.getBondsList(),
    proto.casper.BondProto.toObject, includeInstance),
    blocknumber: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.RChainStateProto}
 */
proto.casper.RChainStateProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.RChainStateProto;
  return proto.casper.RChainStateProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.RChainStateProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.RChainStateProto}
 */
proto.casper.RChainStateProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPrestatehash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPoststatehash(value);
      break;
    case 3:
      var value = new proto.casper.BondProto;
      reader.readMessage(value,proto.casper.BondProto.deserializeBinaryFromReader);
      msg.addBonds(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBlocknumber(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.RChainStateProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.RChainStateProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.RChainStateProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.RChainStateProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrestatehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getPoststatehash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getBondsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.casper.BondProto.serializeBinaryToWriter
    );
  }
  f = message.getBlocknumber();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
};


/**
 * optional bytes preStateHash = 1;
 * @return {string}
 */
proto.casper.RChainStateProto.prototype.getPrestatehash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes preStateHash = 1;
 * This is a type-conversion wrapper around `getPrestatehash()`
 * @return {string}
 */
proto.casper.RChainStateProto.prototype.getPrestatehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPrestatehash()));
};


/**
 * optional bytes preStateHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPrestatehash()`
 * @return {!Uint8Array}
 */
proto.casper.RChainStateProto.prototype.getPrestatehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPrestatehash()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.RChainStateProto.prototype.setPrestatehash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes postStateHash = 2;
 * @return {string}
 */
proto.casper.RChainStateProto.prototype.getPoststatehash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes postStateHash = 2;
 * This is a type-conversion wrapper around `getPoststatehash()`
 * @return {string}
 */
proto.casper.RChainStateProto.prototype.getPoststatehash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPoststatehash()));
};


/**
 * optional bytes postStateHash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPoststatehash()`
 * @return {!Uint8Array}
 */
proto.casper.RChainStateProto.prototype.getPoststatehash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPoststatehash()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.RChainStateProto.prototype.setPoststatehash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * repeated BondProto bonds = 3;
 * @return {!Array<!proto.casper.BondProto>}
 */
proto.casper.RChainStateProto.prototype.getBondsList = function() {
  return /** @type{!Array<!proto.casper.BondProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.casper.BondProto, 3));
};


/** @param {!Array<!proto.casper.BondProto>} value */
proto.casper.RChainStateProto.prototype.setBondsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.casper.BondProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.BondProto}
 */
proto.casper.RChainStateProto.prototype.addBonds = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.casper.BondProto, opt_index);
};


proto.casper.RChainStateProto.prototype.clearBondsList = function() {
  this.setBondsList([]);
};


/**
 * optional int64 blockNumber = 4;
 * @return {number}
 */
proto.casper.RChainStateProto.prototype.getBlocknumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.casper.RChainStateProto.prototype.setBlocknumber = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.EventProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.casper.EventProto.oneofGroups_);
};
goog.inherits(proto.casper.EventProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.EventProto.displayName = 'proto.casper.EventProto';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.casper.EventProto.oneofGroups_ = [[1,2,3]];

/**
 * @enum {number}
 */
proto.casper.EventProto.EventInstanceCase = {
  EVENT_INSTANCE_NOT_SET: 0,
  PRODUCE: 1,
  CONSUME: 2,
  COMM: 3
};

/**
 * @return {proto.casper.EventProto.EventInstanceCase}
 */
proto.casper.EventProto.prototype.getEventInstanceCase = function() {
  return /** @type {proto.casper.EventProto.EventInstanceCase} */(jspb.Message.computeOneofCase(this, proto.casper.EventProto.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.EventProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.EventProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.EventProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.EventProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    produce: (f = msg.getProduce()) && proto.casper.ProduceEventProto.toObject(includeInstance, f),
    consume: (f = msg.getConsume()) && proto.casper.ConsumeEventProto.toObject(includeInstance, f),
    comm: (f = msg.getComm()) && proto.casper.CommEventProto.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.EventProto}
 */
proto.casper.EventProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.EventProto;
  return proto.casper.EventProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.EventProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.EventProto}
 */
proto.casper.EventProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.ProduceEventProto;
      reader.readMessage(value,proto.casper.ProduceEventProto.deserializeBinaryFromReader);
      msg.setProduce(value);
      break;
    case 2:
      var value = new proto.casper.ConsumeEventProto;
      reader.readMessage(value,proto.casper.ConsumeEventProto.deserializeBinaryFromReader);
      msg.setConsume(value);
      break;
    case 3:
      var value = new proto.casper.CommEventProto;
      reader.readMessage(value,proto.casper.CommEventProto.deserializeBinaryFromReader);
      msg.setComm(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.EventProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.EventProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.EventProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.EventProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProduce();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.ProduceEventProto.serializeBinaryToWriter
    );
  }
  f = message.getConsume();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.casper.ConsumeEventProto.serializeBinaryToWriter
    );
  }
  f = message.getComm();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.casper.CommEventProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProduceEventProto produce = 1;
 * @return {?proto.casper.ProduceEventProto}
 */
proto.casper.EventProto.prototype.getProduce = function() {
  return /** @type{?proto.casper.ProduceEventProto} */ (
    jspb.Message.getWrapperField(this, proto.casper.ProduceEventProto, 1));
};


/** @param {?proto.casper.ProduceEventProto|undefined} value */
proto.casper.EventProto.prototype.setProduce = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.casper.EventProto.oneofGroups_[0], value);
};


proto.casper.EventProto.prototype.clearProduce = function() {
  this.setProduce(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.EventProto.prototype.hasProduce = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional ConsumeEventProto consume = 2;
 * @return {?proto.casper.ConsumeEventProto}
 */
proto.casper.EventProto.prototype.getConsume = function() {
  return /** @type{?proto.casper.ConsumeEventProto} */ (
    jspb.Message.getWrapperField(this, proto.casper.ConsumeEventProto, 2));
};


/** @param {?proto.casper.ConsumeEventProto|undefined} value */
proto.casper.EventProto.prototype.setConsume = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.casper.EventProto.oneofGroups_[0], value);
};


proto.casper.EventProto.prototype.clearConsume = function() {
  this.setConsume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.EventProto.prototype.hasConsume = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional CommEventProto comm = 3;
 * @return {?proto.casper.CommEventProto}
 */
proto.casper.EventProto.prototype.getComm = function() {
  return /** @type{?proto.casper.CommEventProto} */ (
    jspb.Message.getWrapperField(this, proto.casper.CommEventProto, 3));
};


/** @param {?proto.casper.CommEventProto|undefined} value */
proto.casper.EventProto.prototype.setComm = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.casper.EventProto.oneofGroups_[0], value);
};


proto.casper.EventProto.prototype.clearComm = function() {
  this.setComm(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.EventProto.prototype.hasComm = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ProduceEventProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.ProduceEventProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.ProduceEventProto.displayName = 'proto.casper.ProduceEventProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ProduceEventProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ProduceEventProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ProduceEventProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ProduceEventProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelshash: msg.getChannelshash_asB64(),
    hash: msg.getHash_asB64(),
    persistent: jspb.Message.getFieldWithDefault(msg, 3, false),
    timesrepeated: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ProduceEventProto}
 */
proto.casper.ProduceEventProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ProduceEventProto;
  return proto.casper.ProduceEventProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ProduceEventProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ProduceEventProto}
 */
proto.casper.ProduceEventProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setChannelshash(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersistent(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTimesrepeated(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ProduceEventProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ProduceEventProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ProduceEventProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ProduceEventProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelshash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPersistent();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getTimesrepeated();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
};


/**
 * optional bytes channelsHash = 1;
 * @return {string}
 */
proto.casper.ProduceEventProto.prototype.getChannelshash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes channelsHash = 1;
 * This is a type-conversion wrapper around `getChannelshash()`
 * @return {string}
 */
proto.casper.ProduceEventProto.prototype.getChannelshash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getChannelshash()));
};


/**
 * optional bytes channelsHash = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannelshash()`
 * @return {!Uint8Array}
 */
proto.casper.ProduceEventProto.prototype.getChannelshash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getChannelshash()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.ProduceEventProto.prototype.setChannelshash = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes hash = 2;
 * @return {string}
 */
proto.casper.ProduceEventProto.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.casper.ProduceEventProto.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.casper.ProduceEventProto.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.ProduceEventProto.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bool persistent = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.casper.ProduceEventProto.prototype.getPersistent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.casper.ProduceEventProto.prototype.setPersistent = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int32 timesRepeated = 4;
 * @return {number}
 */
proto.casper.ProduceEventProto.prototype.getTimesrepeated = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.casper.ProduceEventProto.prototype.setTimesrepeated = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.ConsumeEventProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.ConsumeEventProto.repeatedFields_, null);
};
goog.inherits(proto.casper.ConsumeEventProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.ConsumeEventProto.displayName = 'proto.casper.ConsumeEventProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.ConsumeEventProto.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.ConsumeEventProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.ConsumeEventProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.ConsumeEventProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ConsumeEventProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelshashesList: msg.getChannelshashesList_asB64(),
    hash: msg.getHash_asB64(),
    persistent: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.ConsumeEventProto}
 */
proto.casper.ConsumeEventProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.ConsumeEventProto;
  return proto.casper.ConsumeEventProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.ConsumeEventProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.ConsumeEventProto}
 */
proto.casper.ConsumeEventProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.addChannelshashes(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setHash(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPersistent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.ConsumeEventProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.ConsumeEventProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.ConsumeEventProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.ConsumeEventProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelshashesList_asU8();
  if (f.length > 0) {
    writer.writeRepeatedBytes(
      1,
      f
    );
  }
  f = message.getHash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPersistent();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * repeated bytes channelsHashes = 1;
 * @return {!Array<string>}
 */
proto.casper.ConsumeEventProto.prototype.getChannelshashesList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * repeated bytes channelsHashes = 1;
 * This is a type-conversion wrapper around `getChannelshashesList()`
 * @return {!Array<string>}
 */
proto.casper.ConsumeEventProto.prototype.getChannelshashesList_asB64 = function() {
  return /** @type {!Array<string>} */ (jspb.Message.bytesListAsB64(
      this.getChannelshashesList()));
};


/**
 * repeated bytes channelsHashes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getChannelshashesList()`
 * @return {!Array<!Uint8Array>}
 */
proto.casper.ConsumeEventProto.prototype.getChannelshashesList_asU8 = function() {
  return /** @type {!Array<!Uint8Array>} */ (jspb.Message.bytesListAsU8(
      this.getChannelshashesList()));
};


/** @param {!(Array<!Uint8Array>|Array<string>)} value */
proto.casper.ConsumeEventProto.prototype.setChannelshashesList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {!(string|Uint8Array)} value
 * @param {number=} opt_index
 */
proto.casper.ConsumeEventProto.prototype.addChannelshashes = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


proto.casper.ConsumeEventProto.prototype.clearChannelshashesList = function() {
  this.setChannelshashesList([]);
};


/**
 * optional bytes hash = 2;
 * @return {string}
 */
proto.casper.ConsumeEventProto.prototype.getHash = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes hash = 2;
 * This is a type-conversion wrapper around `getHash()`
 * @return {string}
 */
proto.casper.ConsumeEventProto.prototype.getHash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getHash()));
};


/**
 * optional bytes hash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getHash()`
 * @return {!Uint8Array}
 */
proto.casper.ConsumeEventProto.prototype.getHash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getHash()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.ConsumeEventProto.prototype.setHash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bool persistent = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.casper.ConsumeEventProto.prototype.getPersistent = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.casper.ConsumeEventProto.prototype.setPersistent = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.CommEventProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.casper.CommEventProto.repeatedFields_, null);
};
goog.inherits(proto.casper.CommEventProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.CommEventProto.displayName = 'proto.casper.CommEventProto';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.casper.CommEventProto.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.CommEventProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.CommEventProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.CommEventProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.CommEventProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    consume: (f = msg.getConsume()) && proto.casper.ConsumeEventProto.toObject(includeInstance, f),
    producesList: jspb.Message.toObjectList(msg.getProducesList(),
    proto.casper.ProduceEventProto.toObject, includeInstance),
    peeksList: jspb.Message.toObjectList(msg.getPeeksList(),
    proto.casper.PeekProto.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.CommEventProto}
 */
proto.casper.CommEventProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.CommEventProto;
  return proto.casper.CommEventProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.CommEventProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.CommEventProto}
 */
proto.casper.CommEventProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.casper.ConsumeEventProto;
      reader.readMessage(value,proto.casper.ConsumeEventProto.deserializeBinaryFromReader);
      msg.setConsume(value);
      break;
    case 2:
      var value = new proto.casper.ProduceEventProto;
      reader.readMessage(value,proto.casper.ProduceEventProto.deserializeBinaryFromReader);
      msg.addProduces(value);
      break;
    case 3:
      var value = new proto.casper.PeekProto;
      reader.readMessage(value,proto.casper.PeekProto.deserializeBinaryFromReader);
      msg.addPeeks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.CommEventProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.CommEventProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.CommEventProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.CommEventProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getConsume();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.casper.ConsumeEventProto.serializeBinaryToWriter
    );
  }
  f = message.getProducesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.casper.ProduceEventProto.serializeBinaryToWriter
    );
  }
  f = message.getPeeksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.casper.PeekProto.serializeBinaryToWriter
    );
  }
};


/**
 * optional ConsumeEventProto consume = 1;
 * @return {?proto.casper.ConsumeEventProto}
 */
proto.casper.CommEventProto.prototype.getConsume = function() {
  return /** @type{?proto.casper.ConsumeEventProto} */ (
    jspb.Message.getWrapperField(this, proto.casper.ConsumeEventProto, 1));
};


/** @param {?proto.casper.ConsumeEventProto|undefined} value */
proto.casper.CommEventProto.prototype.setConsume = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.casper.CommEventProto.prototype.clearConsume = function() {
  this.setConsume(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.casper.CommEventProto.prototype.hasConsume = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated ProduceEventProto produces = 2;
 * @return {!Array<!proto.casper.ProduceEventProto>}
 */
proto.casper.CommEventProto.prototype.getProducesList = function() {
  return /** @type{!Array<!proto.casper.ProduceEventProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.casper.ProduceEventProto, 2));
};


/** @param {!Array<!proto.casper.ProduceEventProto>} value */
proto.casper.CommEventProto.prototype.setProducesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.casper.ProduceEventProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.ProduceEventProto}
 */
proto.casper.CommEventProto.prototype.addProduces = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.casper.ProduceEventProto, opt_index);
};


proto.casper.CommEventProto.prototype.clearProducesList = function() {
  this.setProducesList([]);
};


/**
 * repeated PeekProto peeks = 3;
 * @return {!Array<!proto.casper.PeekProto>}
 */
proto.casper.CommEventProto.prototype.getPeeksList = function() {
  return /** @type{!Array<!proto.casper.PeekProto>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.casper.PeekProto, 3));
};


/** @param {!Array<!proto.casper.PeekProto>} value */
proto.casper.CommEventProto.prototype.setPeeksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.casper.PeekProto=} opt_value
 * @param {number=} opt_index
 * @return {!proto.casper.PeekProto}
 */
proto.casper.CommEventProto.prototype.addPeeks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.casper.PeekProto, opt_index);
};


proto.casper.CommEventProto.prototype.clearPeeksList = function() {
  this.setPeeksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.PeekProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.PeekProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.PeekProto.displayName = 'proto.casper.PeekProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.PeekProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.PeekProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.PeekProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.PeekProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    channelindex: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.PeekProto}
 */
proto.casper.PeekProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.PeekProto;
  return proto.casper.PeekProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.PeekProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.PeekProto}
 */
proto.casper.PeekProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChannelindex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.PeekProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.PeekProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.PeekProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.PeekProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChannelindex();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 channelIndex = 1;
 * @return {number}
 */
proto.casper.PeekProto.prototype.getChannelindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.casper.PeekProto.prototype.setChannelindex = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.casper.BondProto = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.casper.BondProto, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.casper.BondProto.displayName = 'proto.casper.BondProto';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.casper.BondProto.prototype.toObject = function(opt_includeInstance) {
  return proto.casper.BondProto.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.casper.BondProto} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BondProto.toObject = function(includeInstance, msg) {
  var f, obj = {
    validator: msg.getValidator_asB64(),
    stake: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.casper.BondProto}
 */
proto.casper.BondProto.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.casper.BondProto;
  return proto.casper.BondProto.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.casper.BondProto} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.casper.BondProto}
 */
proto.casper.BondProto.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setValidator(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStake(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.casper.BondProto.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.casper.BondProto.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.casper.BondProto} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.casper.BondProto.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValidator_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getStake();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional bytes validator = 1;
 * @return {string}
 */
proto.casper.BondProto.prototype.getValidator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes validator = 1;
 * This is a type-conversion wrapper around `getValidator()`
 * @return {string}
 */
proto.casper.BondProto.prototype.getValidator_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getValidator()));
};


/**
 * optional bytes validator = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getValidator()`
 * @return {!Uint8Array}
 */
proto.casper.BondProto.prototype.getValidator_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getValidator()));
};


/** @param {!(string|Uint8Array)} value */
proto.casper.BondProto.prototype.setValidator = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional int64 stake = 2;
 * @return {number}
 */
proto.casper.BondProto.prototype.getStake = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.casper.BondProto.prototype.setStake = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


goog.object.extend(exports, proto.casper);
